[tool.poetry]
name = "pakal"
version = "0.1.0"
description = ""
authors = ["BLooperZ <blooperz@users.noreply.github.com>"]

[tool.poetry.dependencies]
python = ">=3.12"
numpy = "^2.2.6"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.10"
pytest = "^8.3.5"
mypy = "^1.15.0"
pre-commit = "^4.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
plugins = ["numpy.typing.mypy_plugin"]

[tool.ruff]
target-version = "py312"
line-length = 88
fix = false
src = ["pakal", "tests"]

[tool.ruff.format]
# Let the linter handle quotes instead
quote-style = "preserve"

[tool.ruff.lint]
select = [
  # "AIR", # Airflow
  "ERA", # eradicate
  # "FAST", # FastAPI
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "S", # flake8-bandit
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  "A", # flake8-builtins
  "COM", # flake8-commas
  "C4", # flake8-comprehensions
  # "CPY", # flake8-copyright
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  # "DJ", # flake8-django
  # "EM", # flake8-errmsg
  "EXE", # flake8-executable
  "FIX", # flake8-fixme
  "FA", # flake8-future-annotations
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "LOG", # flake8-logging
  "G", # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "PT", # flake8-pytest-style
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "SLOT", # flake8-slots
  "TID", # flake8-tidy-imports
  "TD", # flake8-todos
  "TC", # flake8-type-checking
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "FLY", # flynt
  "I", # isort
  "C90", # mccabe
  "NPY", # NumPy-specific rules
  # "PD", # pandas-vet
  "N", # pep8-naming
  "PERF", # Perflint
  "E", # pycodestyle
  "W", # pycodestyle
  # "DOC", # pydoclint
  "D", # pydocstyle
  "F", # Pyflakes
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "PLC", # Convention
  "PLE", # Error
  "PLR", # Refactor
  "PLW", # Warning
  "UP", # pyupgrade
  "FURB", # refurb
  "RUF", # Ruff-specific rules
  "TRY", # tryceratops
]

fixable = ["I", "COM", "Q"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]

ignore = [
  "RET504", # Allow assigning before return to ease debugging
  "S101", # Allow using assert
  "UP020", # Would explicitly prefer using `io.open` rather than builtin because we allow to overshadow it
  "PTH103", # `os.mkdirs` is more readable
  "PTH119", # `os.path.basename()` does not change type (e.g. bytes to str)
  "D107", # No need to docstring `__init__` method
  "D202", # No blank lines allowed after function docstring -> clashes with Black
  "D", # TODO: Add docstrings
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = [
  "PTH123",  # Allow using builtin `open` function
  "T201",  # Allow using `print` in tests
  "PLR2004",  # Allow magic values in tests
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["open"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

