[tool.poetry]
name = "pakal"
version = "0.1.0"
description = ""
authors = ["BLooperZ <blooperz@users.noreply.github.com>"]

[tool.poetry.dependencies]
python = "^3.9"
numpy = "^2.0.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.292"
black = "^23.9.1"
pytest = "^7.4.2"
mypy = "^1.11.1"
pre-commit = "^3.4.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 88
target-version = ["py39"]
skip-string-normalization = true

[tool.mypy]
strict = true
plugins = ["numpy.typing.mypy_plugin"]

[tool.ruff]
target-version = "py39"
line-length = 88
fix = false
src = ["pakal", "tests"]

select = [
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "A", # flake8-builtins
  "COM", # flake8-commas
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  # "DJ", # flake8-django
  # "EM", # flake8-errmsg
  "EXE", # flake8-executable
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G", # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  # "PD", # pandas-vet
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "PLC", # Convention
  "PLE", # Error
  "PLR", # Refactor
  "PLW", # Warning
  "TRY", # tryceratops
  "NPY", # NumPy-specific rules
  "ANN", # flake8-annotations
  "YTT", # flake8-2020
  "C90", # mccabe
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # pydocstyle
  "I", # isort
  "N", # pep8-naming
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
]

fixable = ["I", "COM"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]

ignore = [
  "RET504", # Allow assigning before return to ease debugging
  "S101", # Allow using assert
  "UP020", # Would explicitly prefer using `io.open` rather than builtin because we allow to overshadow it
  "ANN101", "ANN102", # Do not require annotating self
  "PTH103", # `os.mkdirs` is more readable
  "PTH119", # `os.path.basename()` does not change type (e.g. bytes to str)
  "D107", # No need to docstring `__init__` method
  "D202", # No blank lines allowed after function docstring -> clashes with Black
  "D", # TODO: Add docstrings
]

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["open"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "single"

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = ["D100"]
